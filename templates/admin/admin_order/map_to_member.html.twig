
<div class="d-flex justify-content-end flex-column flex-lg-row">
    <h2 class="me-auto">Détail de la commande</h2>
    <form class="me-2 mb-2" method="post" action="{{ path('admin_order_remove_links', {'id': order.id}) }}"
          onsubmit="return confirm('Êtes-vous sûr de vouloir retirer toutes les liaisons ?');">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ order.id) }}">
        <button class="btn btn-info">
            <i class="bi bi-link-45deg"></i>
            retirer toutes les liaisons
        </button>
    </form>
    <form class="mb-2" method="post" action="{{ path('admin_order_delete_links', {'id': order.id}) }}"
          onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer toutes les lignes de cette commandes ?');">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ order.id) }}">
        <button class="btn btn-danger">
            <i class="bi bi-trash"></i>
            supprimer toutes les lignes
        </button>
    </form>
</div>
<div class="table-responsive-md w-100">
    <table class="table table-striped table-hover">
        <tr>
            <th></th>
            <th>Nom prénom</th>
            <th>Lié à l'adhérent</th>
            <th>Détail</th>
            <th>Montant</th>
        </tr>
        <tbody>
        {% for order_detail in order.orderDetails %}
            <tr>
                <td>{{ order_detail.identifier }}</td>
                <td>{{ order_detail.fullName }}</td>
                <td data-widget-link="{{ order_detail.id }}">
                    {% include 'admin/admin_order/_widget_link_member.html.twig' %}
                </td>
                <td>
                    <table class="table table-bordered ">
                        <tbody>
                        {% for key, value in order_detail.content|filter(value => value != '') %}
                            <tr>
                                <td class="w-50">{{ key }}</td>
                                <td class="w-50">{{ value }}</td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </td>
                <td><strong>{{ order_detail.amount }}</strong> €</td>
            </tr>
        {% else %}
            <tr>
                <td colspan="5">
                    Aucun enregistrement trouvé.
                    Téléchargez un fichier csv pour générer automatiquement les correspondances avec les adhérents.
                </td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
</div>





<script>
    const searchMember = (elem, search) => {
        const autocomplete = document.getElementById(elem.getAttribute('data-target'));
        const orderDetailId = elem.getAttribute('data-order-detail-id');
        fetch('{{ path('admin_member_search') }}?search=' + search + "&orderDetailId=" + orderDetailId)
            .then(response => response.text())
            .then(html => {
                autocomplete.innerHTML = html;
                const members = autocomplete.querySelectorAll('a');
                members.forEach((member) => {
                    member.removeEventListener("click", memberListener);
                    member.addEventListener('click', memberListener);
                })
            })
    }
    const memberListener = (event) => {
        event.preventDefault();
        const url = event.target.getAttribute('href');
        const orderDetailId = event.target.dataset.orderDetailId;
        fetchWidgetLinkMember(url, orderDetailId);
    }
    const fetchWidgetLinkMember = (url, orderDetailId) => {
        fetch(url)
            .then(response => response.text())
            .then(html => {
                document.querySelector("[data-widget-link='" + orderDetailId + "']").innerHTML = html;
                initWidgetsListener();
            })
    }
    let timer;
    const initWidgetsListener = () => {
        const inputsSearch = document.querySelectorAll('[data-search-member]');
        inputsSearch.forEach((input) => {
            input.addEventListener("keyup", function(event) {
                if (event.key === 'Escape') {
                    resetAutoComplete();
                    return;
                }
                let search = event.target.value;
                if (search !== "") {
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        searchMember(event.target, search);
                    }, 300);
                }
            });
        })
        const btnsUnlinkMember = document.querySelectorAll('[data-unlink-member]');
        btnsUnlinkMember.forEach((btn) => {
            btn.removeEventListener("click", btnListener)
            btn.addEventListener("click", btnListener)
        })
    }
    const btnListener = (event) => {
        const url = event.target.dataset.unlinkMember;
        const orderDetailId = event.target.dataset.orderDetailId;
        fetchWidgetLinkMember(url, orderDetailId);
    }
    document.addEventListener("DOMContentLoaded", () => {
        initWidgetsListener();
    })
    const resetAutoComplete = () => {
        document.querySelectorAll("[data-autocomplete]").forEach((e) => {
            e.innerHTML = "";
        })
    }
    document.querySelector('body').addEventListener('click', (e) => {
        resetAutoComplete();
    });
</script>
